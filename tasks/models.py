from django.db import models
from django.utils import timezone


class Topic(models.Model):
    topic_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–¢–µ–º–∞"
        verbose_name_plural = "–¢–µ–º—ã"


class Level(models.Model):
    level_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è")
    required_points = models.IntegerField(verbose_name="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–£—Ä–æ–≤–µ–Ω—å"
        verbose_name_plural = "–£—Ä–æ–≤–Ω–∏"


class Question(models.Model):
    question_id = models.AutoField(primary_key=True)
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    image_url = models.URLField(null=True, blank=True, verbose_name="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE, verbose_name="–¢–µ–º–∞")
    difficulty = models.CharField(max_length=50, verbose_name="–°–ª–æ–∂–Ω–æ—Å—Ç—å")
    subject = models.CharField(max_length=100, verbose_name="–ü—Ä–µ–¥–º–µ—Ç")
    level = models.ForeignKey(Level, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")

    def __str__(self):
        return f"–í–æ–ø—Ä–æ—Å {self.question_id} ({self.topic})"

    class Meta:
        verbose_name = "–í–æ–ø—Ä–æ—Å"
        verbose_name_plural = "–í–æ–ø—Ä–æ—Å—ã"


class Answer(models.Model):
    answer_id = models.AutoField(primary_key=True)
    question = models.ForeignKey(Question, on_delete=models.CASCADE, verbose_name="–í–æ–ø—Ä–æ—Å", related_name="answer_set")
    text = models.CharField(max_length=255, verbose_name="–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
    is_correct = models.BooleanField(default=False, verbose_name="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    created_at = models.DateTimeField(default=timezone.now, verbose_name="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")

    def __str__(self):
        return f"–û—Ç–≤–µ—Ç –Ω–∞ {self.question}"

    class Meta:
        verbose_name = "–û—Ç–≤–µ—Ç"
        verbose_name_plural = "–û—Ç–≤–µ—Ç—ã"


class Hint(models.Model):
    hint_id = models.AutoField(primary_key=True)
    question = models.ForeignKey(Question, on_delete=models.CASCADE, verbose_name="–í–æ–ø—Ä–æ—Å")
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏")
    image_url = models.URLField(null=True, blank=True, verbose_name="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏")

    def __str__(self):
        return f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ {self.question}"

    class Meta:
        verbose_name = "–ü–æ–¥—Å–∫–∞–∑–∫–∞"
        verbose_name_plural = "–ü–æ–¥—Å–∫–∞–∑–∫–∏"


class TestResult(models.Model):
    test_result_id = models.AutoField(primary_key=True)
    start_time = models.DateTimeField(verbose_name="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞", default=timezone.now)
    end_time = models.DateTimeField(null=True, blank=True, verbose_name="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞")
    correct_answers = models.IntegerField(default=0, verbose_name="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    incorrect_answers = models.IntegerField(default=0, verbose_name="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")

    def __str__(self):
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ {self.test_result_id}"

    class Meta:
        verbose_name = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"
        verbose_name_plural = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"


# üëá –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å: –¢–µ–æ—Ä–∏—è –ø–æ —Ç–µ–º–∞–º
class Theory(models.Model):
    theory_id = models.AutoField(primary_key=True)
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE, verbose_name="–¢–µ–º–∞")
    title = models.CharField(max_length=200, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    content = models.TextField(verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏")

    def __str__(self):
        return f"–¢–µ–æ—Ä–∏—è –ø–æ —Ç–µ–º–µ {self.topic.name}"

    class Meta:
        verbose_name = "–¢–µ–æ—Ä–∏—è"
        verbose_name_plural = "–¢–µ–æ—Ä–∏–∏"


class TrainingSession(models.Model):
    session_id = models.AutoField(primary_key=True)
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE, verbose_name="–¢–µ–º–∞")
    start_time = models.DateTimeField(default=timezone.now, verbose_name="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞")
    end_time = models.DateTimeField(null=True, blank=True, verbose_name="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è")

    def __str__(self):
        return f"–°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ - {self.topic.name}"

    class Meta:
        verbose_name = "–°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞"
        verbose_name_plural = "–°–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞"